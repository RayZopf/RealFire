///////////////////////////////////////////////////////////////////////////////////////////////////
//Module register with and react on master for RealFire Extensions
//
//by: Zopf Resident - Ray Zopf (Raz)
//09. Feb. 2014
//v0.464
//Files:
// ExtensionBasics.lslm
//
//
//Prequisites: ----
//
//
//Changelog
//

//FIXME: ----

//TODO: ----
//
///////////////////////////////////////////////////////////////////////////////////////////////////


$module (integer m_iDebug, string m_sGroup, integer m_iSingle ,integer m_iEnabled, integer m_iAvail, integer m_iChannel, string m_sScriptName, integer m_iLinkType, integer m_iVerbose, string m_sTitle, string m_sScriptName, string m_sVersion, string m_sAuthors)

$import Debug.lslm(m_iDebugMode=m_iDebug, m_sScriptName=m_sScriptName);
$import RealFireMessageMap.lslm();
$import GroupHandling.lslm(m_sGroup=m_sGroup);
$import PrintStatusInfo.lslm(m_iVerbose=m_iVerbose, m_iAvail=m_iAvail, m_sTitle=m_sTitle, m_sScriptName=m_sScriptName, m_iEnabled=m_iEnabled, m_sVersion=m_sVersion, m_sAuthors=m_sAuthors);
$import ColorChanger.lslm();


//###
//ExtensionBasics.lslm
//0.464 - 09Feb2014

// pragma inline
RegisterExtension(integer link)
{
	if (m_iEnabled) {
		if (m_iSingle && INVENTORY_NONE == llGetInventoryType(g_sMainScript)) {
			m_iAvail = FALSE;
			return;
		}
		string sId = getGroup(m_sGroup) + SEPARATOR + m_sScriptName;
		if (m_iAvail) llMessageLinked(link, m_iChannel, "1", (key)sId);
			else if (m_iSingle) llMessageLinked(link, m_iChannel, "0", (key)sId);
	}
}


// pragma inline
string MasterCommand(integer iChan, string sVal, integer conf)
{
	if (iChan == COMMAND_CHANNEL) {
		list lValues = llParseString2List(sVal, [SEPARATOR], []);
		string sCommand = llList2String(lValues, 0);

		if ("register" == sCommand) {

			RegisterExtension(m_iLinkType);
		} else if ("verbose" == sCommand) {
			m_iVerbose = TRUE;
			InfoLines(FALSE);
		}
		else if ("nonverbose" == sCommand) m_iVerbose = FALSE;
		else if (conf && "config" == sCommand) return sVal;
		else if (m_iEnabled) llSetTimerEvent(0.1);

		return "";
	} return "";
}


 integer getConfigParticleFire(string sVal)
{
	list lConfigs = llParseString2List(sVal, ["config","=",SEPARATOR], []);
	integer n = llGetListLength(lConfigs);
	integer count = 0;
	string par;
	Debug("getConfig Particlefire "+(string)lConfigs+" n "+(string)n);

	if (n > 1 && 0 == n%2) {
		string val;
		do {
			par = llList2String(lConfigs, count);
			val = llList2String(lConfigs, count+1);

			if (par == "changelight") g_iChangeLight = (integer)val;
			else if ("singlefire" == par) g_iSingleFire = (integer)val;
			// config for particle fire
			else if (par == "topcolor") g_vDefEndColor = (vector)val;
			else if (par == "bottomcolor") g_vDefStartColor = (vector)val;
			// config for light
			else if (par == "intensity") g_iDefIntensity = (integer)val;
			else if (par == "radius") g_iDefRadius = (integer)val;
			else if (par == "falloff") g_iDefFalloff = (integer)val;

			// color config
			else if ("startcolor" == par) {
				setColor(1, val);
				if (2 == n) return 2;
			} else if ("endcolor" == par) {
				setColor(0, val);
				if (2 == n) return 2;
			}

			count = count +2;
		} while (count <= n);
	} else {
		if (1 == n) {
			par = llList2String(lConfigs, count);
			if ("reset" == par) {
				g_iPerRedStart = (integer)g_vDefStartColor.x;
				g_iPerGreenStart = (integer)g_vDefStartColor.y;
				g_iPerBlueStart = (integer)g_vDefStartColor.z;
				g_iPerRedEnd = (integer)g_vDefEndColor.x;
				g_iPerGreenEnd = (integer)g_vDefEndColor.y;
				g_iPerBlueEnd = (integer)g_vDefEndColor.z;
			}
		}
		return 0;
	}
	return 1;
}

/*
getConfigSound(string sConfig)
{
	list lConfigs = llParseString2List(sConfig, ["=",SEPARATOR], []);
	integer n = llGetListLength(lConfigs);
	integer count = 0;
	if (n > 1 && 0 == n%2) do {
		string par = llList2String(lConfigs, count);
		string val = llList2String(lConfigs, count+1);
/ *
		// config for particle fire
		if (par == "topcolor") g_vDefEndColor = checkVector("topColor", (vector)val);
		else if (par == "bottomcolor") g_vDefStartColor = checkVector("bottomColor", (vector)val);
		// config for light
		else if (par == "intensity") g_iDefIntensity = checkInt("intensity", (integer)val, 0, 100);
		else if (par == "radius") g_iDefRadius = checkInt("radius", (integer)val, 0, 100);
		else if (par == "falloff") g_iDefFalloff = checkInt("falloff", (integer)val, 0, 100);
		// color config
		else if ("startcolor" == par) setColor(1, val);
		else if ("endcolor" == par) setColor(0, val);
* /
		count = count +2;
	} while (count <= n);
}


integer getConfigBSound(string sConfig)
{
	list lConfigs = llParseString2List(sConfig, ["=",SEPARATOR], []);
	integer n = llGetListLength(lConfigs);
	integer count = 0;
	if (n > 1 && 0 == n%2) do {
		string par = llList2String(lConfigs, count);
		string val = llList2String(lConfigs, count+1);
/ *
		// config for particle fire
		if (par == "topcolor") g_vDefEndColor = checkVector("topColor", (vector)val);
		else if (par == "bottomcolor") g_vDefStartColor = checkVector("bottomColor", (vector)val);
		// config for light
		else if (par == "intensity") g_iDefIntensity = checkInt("intensity", (integer)val, 0, 100);
		else if (par == "radius") g_iDefRadius = checkInt("radius", (integer)val, 0, 100);
		else if (par == "falloff") g_iDefFalloff = checkInt("falloff", (integer)val, 0, 100);
		// color config
		else if ("startcolor" == par) setColor(1, val);
		else if ("endcolor" == par) setColor(0, val);
* /
		count = count +2;
	} while (count <= n);
	else return 0;
	return 1;
}
*/

integer getConfigRemote(string sVal)
{
	list lConfigs = llParseString2List(sVal, ["config","=",SEPARATOR], []);
	integer n = llGetListLength(lConfigs);
	integer count = 0;
	string par;
	Debug("getConfig Particlefire "+(string)lConfigs+" n "+(string)n);

	if (n > 1 && 0 == n%2) {
		string val;
		do {
			par = llList2String(lConfigs, count);
			val = llList2String(lConfigs, count+1);

			if (par == "msgnumber") {
				g_iMsgNumber = (integer)val;
				return 1;
			}

			count = count +2;
		} while (count <= n);
	} else return 0;
	return 0;
}

//END ExtensionBasics.lslm
//###