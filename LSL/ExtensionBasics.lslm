///////////////////////////////////////////////////////////////////////////////////////////////////
//Module register with and react on master for RealFire Extensions
//
//by: Zopf Resident - Ray Zopf (Raz)
//06. Feb. 2014
//v0.4
//Files:
// ExtensionBasics.lslm
//
//
//Prequisites: GroupHandling.lslm
//
//
//Changelog
//

//FIXME: ----

//TODO: ----
//
///////////////////////////////////////////////////////////////////////////////////////////////////


$module (integer m_iDebug, string m_sGroup, integer m_iEnabled, integer m_iAvail, integer m_iChannel, string m_sScriptName, integer m_iLinkType, integer m_iVerbose, string m_sTitle, string m_sScriptName, string m_sVersion, string m_sAuthors)

$import RealFireMessageMap.lslm();
$import GroupHandling.lslm(m_sGroup=m_sGroup);
$import PrintStatusInfo.lslm(m_iVerbose=m_iVerbose, m_iAvail=m_iAvail, m_sTitle=m_sTitle, m_sScriptName=m_sScriptName, m_iOn=m_iEnabled, m_sVersion=m_sVersion, m_sAuthors=m_sAuthors);
$import GenericFunctions.lslm();


//###
//ExtensionBasics.lslm
//0.4 - 04Feb2014

RegisterExtension(integer link)
{
	string sId = getGroup(m_sGroup) + SEPARATOR + m_sScriptName;
	if (m_iEnabled && m_iAvail) llMessageLinked(link, m_iChannel, "1", (key)sId);
		else llMessageLinked(link, m_iChannel, "0", (key)sId);
}


MasterCommand(integer iChan, string sVal, integer conf)
{
	if (iChan == COMMAND_CHANNEL) {
		list lValues = llParseString2List(sVal, [SEPARATOR], []);
		string sCommand = llList2String(lValues, 0);
		string sConfig = llList2String(lValues, 1);

		if ("register" == sCommand) RegisterExtension(m_iLinkType);
		else if ("verbose" == sCommand) {
			m_iVerbose = TRUE;
			InfoLines(FALSE);
		}
		else if ("nonverbose" == sCommand) m_iVerbose = FALSE;
		else if ("globaldebug" == sCommand) m_iVerbose = TRUE;
		else if (conf && "config" == sCommand) getConfig(sConfig);

		else llSetTimerEvent(0.1);
	}
}


getConfig(string sConfig)
{
	list lConfigs = llParseString2List(sConfig, ["=",SEPARATOR], []);
	integer n = llGetListLength(lConfigs);
	integer count = 0;
	if (n > 1 && 0 == n%2) do {
		string par = llList2String(lConfigs, count);
		string val = llList2String(lConfigs, count+1);

		// config for particle fire
		if (par == "topcolor") g_vDefEndColor = checkVector("topColor", (vector)val);
		else if (par == "bottomcolor") g_vDefStartColor = checkVector("bottomColor", (vector)val);
		// config for light
		else if (par == "intensity") g_iDefIntensity = checkInt("intensity", (integer)val, 0, 100);
		else if (par == "radius") g_iDefRadius = checkInt("radius", (integer)val, 0, 100);
		else if (par == "falloff") g_iDefFalloff = checkInt("falloff", (integer)val, 0, 100);
		// color config
		else if ("startcolor" == par) setColor(1, val);
		else if ("endcolor" == par) setColor(0, val);

		count = count +2;
	} while (count <= n);
}


setColor(integer pos, string msg)
{
	if (1 == pos) {
		if (msg == "-Red") g_iPerRedStart = max(g_iPerRedStart - 10, 0);
		else if (msg == "-Green") g_iPerGreenStart = max(g_iPerGreenStart - 10, 0);
		else if (msg == "-Blue") g_iPerBlueStart = max(g_iPerBlueStart - 10, 0);
		else if (msg == "+Red") g_iPerRedStart = min(g_iPerRedStart + 10, 100);
		else if (msg == "+Green") g_iPerGreenStart = min(g_iPerGreenStart + 10, 100);
		else if (msg == "+Blue") g_iPerBlueStart = min(g_iPerBlueStart + 10, 100);
		else if (msg == "R min/max") { if (g_iPerRedStart) g_iPerRedStart = 0; else g_iPerRedStart = 100; }
		else if (msg == "G min/max") { if (g_iPerGreenStart) g_iPerGreenStart = 0; else g_iPerGreenStart = 100; }
		else if (msg == "B min/max") { if (g_iPerBlueStart) g_iPerBlueStart = 0; else g_iPerBlueStart = 100; }
		else if (msg == "One color") {
			g_iPerRedEnd = g_iPerRedStart;
			g_iPerGreenEnd = g_iPerGreenStart;
			g_iPerBlueEnd = g_iPerBlueStart;
		}
		//updateSize(g_fPerSize);
	} else {
		if (msg == "-Red") g_iPerRedEnd = max(g_iPerRedEnd - 10, 0);
		else if (msg == "-Green") g_iPerGreenEnd = max(g_iPerGreenEnd - 10, 0);
		else if (msg == "-Blue") g_iPerBlueEnd = max(g_iPerBlueEnd - 10, 0);
		else if (msg == "+Red") g_iPerRedEnd = min(g_iPerRedEnd + 10, 100);
		else if (msg == "+Green") g_iPerGreenEnd = min(g_iPerGreenEnd + 10, 100);
		else if (msg == "+Blue") g_iPerBlueEnd = min(g_iPerBlueEnd + 10, 100);
		else if (msg == "R min/max") { if (g_iPerRedEnd) g_iPerRedEnd = 0; else g_iPerRedEnd = 100; }
		else if (msg == "G min/max") { if (g_iPerGreenEnd) g_iPerGreenEnd = 0; else g_iPerGreenEnd = 100; }
		else if (msg == "B min/max") { if (g_iPerBlueEnd) g_iPerBlueEnd = 0; else g_iPerBlueEnd = 100; }
		else if (msg == "One color") {
			g_iPerRedStart = g_iPerRedEnd;
			g_iPerGreenStart = g_iPerGreenEnd;
			g_iPerBlueStart = g_iPerBlueEnd;
		}
		//updateSize(g_fPerSize);
	}
}

//END ExtensionBasics.lslm
//###